Array: [4 -6 2 5]
Answer: 7

BRUTE =>
   TC = O(n^3), SC = O(1)
   {
   int sum=0, maxSum = INT_MIN;
   for(int i=0; i<n; i++){
     for(int j=0; j<n; j++){
        sum=0;
        for(int k=i; h<=j; k++){
            sum += arr[k]
        }
        maxSum = max(maxSUM, sum)
    }
  }
  return maxSum;
}


BETTER =>
 TC = O(N^2), SC = O(1)
int largestContiguousSum(vector <int> &arr){
    int ans=INT_MIN, sum=0;
	
	for(int i=0; i<arr.size(); i++){
		sum=0;
		for(int j=i; j<n; j++){
			sum += arr[j];
			
			ans = max(ans, sum);
		}
	}
	return ans;
}


OPTIMAL(Kadane's Algo) =>
 TC=O(N) SC = O(1)
 int largestContiguousSum(vector <int> &arr){
	int n = arr.size();
	int maxSum = INT_MIN;
	int sum=0;
	
	for(int i=0; i<n; i++){
		sum += arr[i];
		
		maxSum = max(maxSum, sum);
		
		if(sum <0) sum=0;
	}
	return maxSum;
    
}

//Printing the subarray
void largestContiguousSum(vector <int> &arr){
	int n = arr.size();
	int maxSum = INT_MIN;
	int sum=0;
	int startInd =-1, endInd=-1, start=0;
	
	for(int i=0; i<n; i++){
		if(sum==0) start = i;
		sum += arr[i];
		
		if(maxSum < sum){
			maxSum = sum;
			startInd = start;
			endInd = i;
		}
		
		if(sum <0) sum=0;
	}
	
	for(int i=startInd; i<=endInd; i++){
		cout<<arr[i]<<" ";
	}
    
}
